{"ast":null,"code":"export const isInstanceOf = (arg, type, properties) => {\n  return (arg === null || arg === void 0 ? void 0 : arg.__type__) === type && isLike(arg, properties);\n};\nexport const isLike = (arg, properties) => {\n  properties.forEach(property => assert(arg[property] !== undefined, `Property ${String(property)} is required`));\n  return true;\n};\nexport function assert(condition, msg) {\n  if (condition === false) throw new Error(msg);\n}","map":{"version":3,"names":["isInstanceOf","arg","type","properties","__type__","isLike","forEach","property","assert","undefined","String","condition","msg","Error"],"sources":["/Users/t.b.araujouva.nl/Documents/GitHub/port-pilotUvA-02/src/framework/helpers.ts"],"sourcesContent":["import { Omit } from 'lodash'\n\nexport const isInstanceOf = <T>(\n  arg: any,\n  type: string,\n  properties: Array<keyof T>\n): arg is T => {\n  return arg?.__type__ === type && isLike<T>(arg, properties)\n}\n\nexport const isLike = <T>(\n  arg: any,\n  properties: Array<keyof T>\n): arg is T => {\n  properties.forEach((property) => assert((arg as T)[property] !== undefined, `Property ${String(property)} is required`))\n  return true\n}\n\nexport function assert (condition: unknown, msg?: string): asserts condition {\n  if (condition === false) throw new Error(msg)\n}\n\nexport type Weak<T> = Omit<T, '__type__'>\n"],"mappings":"AAEA,OAAO,MAAMA,YAAY,GAAG,CAC1BC,GAD0B,EAE1BC,IAF0B,EAG1BC,UAH0B,KAIb;EACb,OAAO,CAAAF,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,QAAL,MAAkBF,IAAlB,IAA0BG,MAAM,CAAIJ,GAAJ,EAASE,UAAT,CAAvC;AACD,CANM;AAQP,OAAO,MAAME,MAAM,GAAG,CACpBJ,GADoB,EAEpBE,UAFoB,KAGP;EACbA,UAAU,CAACG,OAAX,CAAoBC,QAAD,IAAcC,MAAM,CAAEP,GAAD,CAAWM,QAAX,MAAyBE,SAA1B,EAAsC,YAAWC,MAAM,CAACH,QAAD,CAAW,cAAlE,CAAvC;EACA,OAAO,IAAP;AACD,CANM;AAQP,OAAO,SAASC,MAAT,CAAiBG,SAAjB,EAAqCC,GAArC,EAAsE;EAC3E,IAAID,SAAS,KAAK,KAAlB,EAAyB,MAAM,IAAIE,KAAJ,CAAUD,GAAV,CAAN;AAC1B"},"metadata":{},"sourceType":"module"}