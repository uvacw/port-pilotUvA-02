{"ast":null,"code":"import { isCommandSystem, isCommandUI } from './types/commands';\nexport default class CommandRouter {\n  constructor(system, visualisationEngine) {\n    this.system = void 0;\n    this.visualisationEngine = void 0;\n    this.system = system;\n    this.visualisationEngine = visualisationEngine;\n  }\n\n  async onCommand(command) {\n    return await new Promise((resolve, reject) => {\n      if (isCommandSystem(command)) {\n        this.onCommandSystem(command, resolve);\n      } else if (isCommandUI(command)) {\n        this.onCommandUI(command, resolve);\n      } else {\n        reject(new TypeError('Unknown command' + JSON.stringify(command)));\n      }\n    });\n  }\n\n  onCommandSystem(command, resolve) {\n    this.system.send(command);\n    resolve({\n      __type__: 'Response',\n      command,\n      payload: {\n        __type__: 'PayloadVoid',\n        value: undefined\n      }\n    });\n  }\n\n  onCommandUI(command, reject) {\n    this.visualisationEngine.render(command).then(response => {\n      reject(response);\n    }, () => {});\n  }\n\n}","map":{"version":3,"names":["isCommandSystem","isCommandUI","CommandRouter","constructor","system","visualisationEngine","onCommand","command","Promise","resolve","reject","onCommandSystem","onCommandUI","TypeError","JSON","stringify","send","__type__","payload","value","undefined","render","then","response"],"sources":["/Users/t.b.araujouva.nl/Documents/GitHub/port-pilotUvA-02/src/framework/command_router.ts"],"sourcesContent":["import { Command, Response, isCommandSystem, isCommandUI, CommandUI, CommandSystem } from './types/commands'\nimport { CommandHandler, System, VisualisationEngine } from './types/modules'\n\nexport default class CommandRouter implements CommandHandler {\n  system: System\n  visualisationEngine: VisualisationEngine\n\n  constructor (system: System, visualisationEngine: VisualisationEngine) {\n    this.system = system\n    this.visualisationEngine = visualisationEngine\n  }\n\n  async onCommand (command: Command): Promise<Response> {\n    return await new Promise<Response>((resolve, reject) => {\n      if (isCommandSystem(command)) {\n        this.onCommandSystem(command, resolve)\n      } else if (isCommandUI(command)) {\n        this.onCommandUI(command, resolve)\n      } else {\n        reject(new TypeError('Unknown command' + JSON.stringify(command)))\n      }\n    })\n  }\n\n  onCommandSystem (command: CommandSystem, resolve: (response: Response) => void): void {\n    this.system.send(command)\n    resolve({ __type__: 'Response', command, payload: { __type__: 'PayloadVoid', value: undefined } })\n  }\n\n  onCommandUI (command: CommandUI, reject: (reason?: any) => void): void {\n    this.visualisationEngine.render(command).then(\n      (response) => { reject(response) },\n      () => {}\n    )\n  }\n}\n"],"mappings":"AAAA,SAA4BA,eAA5B,EAA6CC,WAA7C,QAA0F,kBAA1F;AAGA,eAAe,MAAMC,aAAN,CAA8C;EAI3DC,WAAW,CAAEC,MAAF,EAAkBC,mBAAlB,EAA4D;IAAA,KAHvED,MAGuE;IAAA,KAFvEC,mBAEuE;IACrE,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,mBAAL,GAA2BA,mBAA3B;EACD;;EAEc,MAATC,SAAS,CAAEC,OAAF,EAAuC;IACpD,OAAO,MAAM,IAAIC,OAAJ,CAAsB,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtD,IAAIV,eAAe,CAACO,OAAD,CAAnB,EAA8B;QAC5B,KAAKI,eAAL,CAAqBJ,OAArB,EAA8BE,OAA9B;MACD,CAFD,MAEO,IAAIR,WAAW,CAACM,OAAD,CAAf,EAA0B;QAC/B,KAAKK,WAAL,CAAiBL,OAAjB,EAA0BE,OAA1B;MACD,CAFM,MAEA;QACLC,MAAM,CAAC,IAAIG,SAAJ,CAAc,oBAAoBC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAlC,CAAD,CAAN;MACD;IACF,CARY,CAAb;EASD;;EAEDI,eAAe,CAAEJ,OAAF,EAA0BE,OAA1B,EAAuE;IACpF,KAAKL,MAAL,CAAYY,IAAZ,CAAiBT,OAAjB;IACAE,OAAO,CAAC;MAAEQ,QAAQ,EAAE,UAAZ;MAAwBV,OAAxB;MAAiCW,OAAO,EAAE;QAAED,QAAQ,EAAE,aAAZ;QAA2BE,KAAK,EAAEC;MAAlC;IAA1C,CAAD,CAAP;EACD;;EAEDR,WAAW,CAAEL,OAAF,EAAsBG,MAAtB,EAA4D;IACrE,KAAKL,mBAAL,CAAyBgB,MAAzB,CAAgCd,OAAhC,EAAyCe,IAAzC,CACGC,QAAD,IAAc;MAAEb,MAAM,CAACa,QAAD,CAAN;IAAkB,CADpC,EAEE,MAAM,CAAE,CAFV;EAID;;AA/B0D"},"metadata":{},"sourceType":"module"}