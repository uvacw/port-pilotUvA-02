{"ast":null,"code":"let pyScript;\n\nonmessage = event => {\n  const {\n    eventType\n  } = event.data;\n\n  switch (eventType) {\n    case 'initialise':\n      initialise().then(() => {\n        self.postMessage({\n          eventType: 'initialiseDone'\n        });\n      });\n      break;\n\n    case 'firstRunCycle':\n      pyScript = self.pyodide.runPython(`port.start(${event.data.sessionId})`);\n      runCycle(null);\n      break;\n\n    case 'nextRunCycle':\n      const {\n        response\n      } = event.data;\n      unwrap(response).then(userInput => {\n        runCycle(userInput);\n      });\n      break;\n\n    default:\n      console.log('[ProcessingWorker] Received unsupported event: ', eventType);\n  }\n};\n\nfunction runCycle(payload) {\n  console.log('[ProcessingWorker] runCycle ' + JSON.stringify(payload));\n  scriptEvent = pyScript.send(payload);\n  self.postMessage({\n    eventType: 'runCycleDone',\n    scriptEvent: scriptEvent.toJs({\n      create_proxies: false,\n      dict_converter: Object.fromEntries\n    })\n  });\n}\n\nfunction unwrap(response) {\n  console.log('[ProcessingWorker] unwrap response: ' + JSON.stringify(response.payload));\n  return new Promise(resolve => {\n    switch (response.payload.__type__) {\n      case 'PayloadFile':\n        copyFileToPyFS(response.payload.value, resolve);\n        break;\n\n      default:\n        resolve(response.payload);\n    }\n  });\n}\n\nfunction copyFileToPyFS(file, resolve) {\n  const reader = file.stream().getReader();\n  const pyFile = self.pyodide.FS.open(file.name, 'w');\n\n  const writeToPyFS = _ref => {\n    let {\n      done,\n      value\n    } = _ref;\n\n    if (done) {\n      resolve({\n        __type__: 'PayloadString',\n        value: file.name\n      });\n    } else {\n      self.pyodide.FS.write(pyFile, value, 0, value.length);\n      reader.read().then(writeToPyFS);\n    }\n  };\n\n  reader.read().then(writeToPyFS);\n}\n\nfunction initialise() {\n  console.log('[ProcessingWorker] initialise');\n  return startPyodide().then(pyodide => {\n    self.pyodide = pyodide;\n    return loadPackages();\n  }).then(() => {\n    return installPortPackage();\n  });\n}\n\nfunction startPyodide() {\n  importScripts('https://cdn.jsdelivr.net/pyodide/v0.21.2/full/pyodide.js');\n  console.log('[ProcessingWorker] loading Pyodide');\n  return loadPyodide({\n    indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.21.2/full/'\n  });\n}\n\nfunction loadPackages() {\n  console.log('[ProcessingWorker] loading packages');\n  return self.pyodide.loadPackage(['micropip', 'python-magic', 'pandas', 'beautifulsoup4', 'lxml']);\n}\n\nfunction installPortPackage() {\n  console.log('[ProcessingWorker] load port package');\n  return self.pyodide.runPythonAsync(`\n    import micropip\n    await micropip.install(\"/port-0.0.0-py3-none-any.whl\", deps=False)\n    await micropip.install(\"https://d3i-infra.github.io/ddp-inspector/ddpinspect/dist/ddpinspect-0.0.0-py3-none-any.whl\", deps=False)\n\n    import port\n  `);\n}","map":{"version":3,"names":["pyScript","onmessage","event","eventType","data","initialise","then","self","postMessage","pyodide","runPython","sessionId","runCycle","response","unwrap","userInput","console","log","payload","JSON","stringify","scriptEvent","send","toJs","create_proxies","dict_converter","Object","fromEntries","Promise","resolve","__type__","copyFileToPyFS","value","file","reader","stream","getReader","pyFile","FS","open","name","writeToPyFS","done","write","length","read","startPyodide","loadPackages","installPortPackage","importScripts","loadPyodide","indexURL","loadPackage","runPythonAsync"],"sources":["/Users/t.b.araujouva.nl/Documents/GitHub/port-pilotUvA-02/src/framework/processing/py_worker.js"],"sourcesContent":["let pyScript\n\nonmessage = (event) => {\n  const { eventType } = event.data\n  switch (eventType) {\n    case 'initialise':\n      initialise().then(() => {\n        self.postMessage({ eventType: 'initialiseDone' })\n      })\n      break\n\n    case 'firstRunCycle':\n      pyScript = self.pyodide.runPython(`port.start(${event.data.sessionId})`)\n      runCycle(null)\n      break\n\n    case 'nextRunCycle':\n      const { response } = event.data\n      unwrap(response).then((userInput) => {\n        runCycle(userInput)\n      })\n      break\n\n    default:\n      console.log('[ProcessingWorker] Received unsupported event: ', eventType)\n  }\n}\n\nfunction runCycle (payload) {\n  console.log('[ProcessingWorker] runCycle ' + JSON.stringify(payload))\n  scriptEvent = pyScript.send(payload)\n  self.postMessage({\n    eventType: 'runCycleDone',\n    scriptEvent: scriptEvent.toJs({\n      create_proxies: false,\n      dict_converter: Object.fromEntries\n    })\n  })\n}\n\nfunction unwrap (response) {\n  console.log('[ProcessingWorker] unwrap response: ' + JSON.stringify(response.payload))\n  return new Promise((resolve) => {\n    switch (response.payload.__type__) {\n      case 'PayloadFile':\n        copyFileToPyFS(response.payload.value, resolve)\n        break\n\n      default:\n        resolve(response.payload)\n    }\n  })\n}\n\nfunction copyFileToPyFS (file, resolve) {\n  const reader = file.stream().getReader()\n  const pyFile = self.pyodide.FS.open(file.name, 'w')\n\n  const writeToPyFS = ({ done, value }) => {\n    if (done) {\n      resolve({ __type__: 'PayloadString', value: file.name })\n    } else {\n      self.pyodide.FS.write(pyFile, value, 0, value.length)\n      reader.read().then(writeToPyFS)\n    }\n  }\n  reader.read().then(writeToPyFS)\n}\n\nfunction initialise () {\n  console.log('[ProcessingWorker] initialise')\n  return startPyodide().then((pyodide) => {\n    self.pyodide = pyodide\n    return loadPackages()})\n  .then(() => {\n    return installPortPackage()\n  })\n}\n\nfunction startPyodide() {\n  importScripts('https://cdn.jsdelivr.net/pyodide/v0.21.2/full/pyodide.js')\n\n  console.log('[ProcessingWorker] loading Pyodide')\n  return loadPyodide({\n    indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.21.2/full/'\n  })  \n}\n\nfunction loadPackages() {\n  console.log('[ProcessingWorker] loading packages')\n  return self.pyodide.loadPackage(['micropip', 'python-magic', 'pandas', 'beautifulsoup4', 'lxml'])\n}\n\nfunction installPortPackage() {\n  console.log('[ProcessingWorker] load port package')\n  return self.pyodide.runPythonAsync(`\n    import micropip\n    await micropip.install(\"/port-0.0.0-py3-none-any.whl\", deps=False)\n    await micropip.install(\"https://d3i-infra.github.io/ddp-inspector/ddpinspect/dist/ddpinspect-0.0.0-py3-none-any.whl\", deps=False)\n\n    import port\n  `);  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}