{"ast":null,"code":"import { isCommand } from '../types/commands';\nexport default class WorkerProcessingEngine {\n  constructor(sessionId, worker, commandHandler) {\n    this.sessionId = void 0;\n    this.worker = void 0;\n    this.commandHandler = void 0;\n    this.resolveInitialized = void 0;\n    this.resolveContinue = void 0;\n    this.sessionId = sessionId;\n    this.commandHandler = commandHandler;\n    this.worker = worker;\n    this.worker.onerror = console.log;\n\n    this.worker.onmessage = event => {\n      console.log('[WorkerProcessingEngine] Received event from worker: ', event.data.eventType);\n      this.handleEvent(event);\n    };\n\n    this.trackUserStart(sessionId);\n  }\n\n  trackUserStart(sessionId) {\n    const key = `${sessionId}-tracking`;\n    const jsonString = JSON.stringify({\n      message: 'user started'\n    });\n    const command = {\n      __type__: 'CommandSystemDonate',\n      key,\n      json_string: jsonString\n    };\n    this.commandHandler.onCommand(command).then(() => {}, () => {});\n  }\n\n  handleEvent(event) {\n    const {\n      eventType\n    } = event.data;\n    console.log('[ReactEngine] received eventType: ', eventType);\n\n    switch (eventType) {\n      case 'initialiseDone':\n        console.log('[ReactEngine] received: initialiseDone');\n        this.resolveInitialized();\n        break;\n\n      case 'runCycleDone':\n        console.log('[ReactEngine] received: event', event.data.scriptEvent);\n        this.handleRunCycle(event.data.scriptEvent);\n        break;\n\n      default:\n        console.log('[ReactEngine] received unsupported flow event: ', eventType);\n    }\n  }\n\n  start() {\n    console.log('[WorkerProcessingEngine] started');\n    const waitForInitialization = this.waitForInitialization();\n    const waitForSplashScreen = this.waitForSplashScreen();\n    Promise.all([waitForInitialization, waitForSplashScreen]).then(() => {\n      this.firstRunCycle();\n    }, () => {});\n  }\n\n  async waitForInitialization() {\n    return await new Promise(resolve => {\n      this.resolveInitialized = resolve;\n      this.worker.postMessage({\n        eventType: 'initialise'\n      });\n    });\n  }\n\n  async waitForSplashScreen() {\n    return await new Promise(resolve => {\n      this.resolveContinue = resolve;\n      this.renderSplashScreen();\n    });\n  }\n\n  renderSplashScreen() {\n    const command = {\n      __type__: 'CommandUIRender',\n      page: {\n        __type__: 'PropsUIPageSplashScreen'\n      }\n    };\n\n    if (isCommand(command)) {\n      this.commandHandler.onCommand(command).then(_response => this.resolveContinue(), () => {});\n    }\n  }\n\n  firstRunCycle() {\n    this.worker.postMessage({\n      eventType: 'firstRunCycle',\n      sessionId: this.sessionId\n    });\n  }\n\n  nextRunCycle(response) {\n    this.worker.postMessage({\n      eventType: 'nextRunCycle',\n      response\n    });\n  }\n\n  terminate() {\n    this.worker.terminate();\n  }\n\n  handleRunCycle(command) {\n    if (isCommand(command)) {\n      this.commandHandler.onCommand(command).then(response => this.nextRunCycle(response), () => {});\n    }\n  }\n\n}","map":{"version":3,"names":["isCommand","WorkerProcessingEngine","constructor","sessionId","worker","commandHandler","resolveInitialized","resolveContinue","onerror","console","log","onmessage","event","data","eventType","handleEvent","trackUserStart","key","jsonString","JSON","stringify","message","command","__type__","json_string","onCommand","then","scriptEvent","handleRunCycle","start","waitForInitialization","waitForSplashScreen","Promise","all","firstRunCycle","resolve","postMessage","renderSplashScreen","page","_response","nextRunCycle","response","terminate"],"sources":["/Users/t.b.araujouva.nl/Documents/GitHub/port-pilotUvA-02/src/framework/processing/worker_engine.ts"],"sourcesContent":["import { CommandHandler, ProcessingEngine } from '../types/modules'\nimport { CommandSystemDonate, CommandUIRender, isCommand, Response } from '../types/commands'\n\nexport default class WorkerProcessingEngine implements ProcessingEngine {\n  sessionId: String\n  worker: Worker\n  commandHandler: CommandHandler\n\n  resolveInitialized!: () => void\n  resolveContinue!: () => void\n\n  constructor (sessionId: string, worker: Worker, commandHandler: CommandHandler) {\n    this.sessionId = sessionId\n    this.commandHandler = commandHandler\n    this.worker = worker\n    this.worker.onerror = console.log\n    this.worker.onmessage = (event) => {\n      console.log(\n        '[WorkerProcessingEngine] Received event from worker: ',\n        event.data.eventType\n      )\n      this.handleEvent(event)\n    }\n\n    this.trackUserStart(sessionId)\n  }\n\n  trackUserStart (sessionId: string): void {\n    const key = `${sessionId}-tracking`\n    const jsonString = JSON.stringify({ message: 'user started' })\n    const command: CommandSystemDonate = { __type__: 'CommandSystemDonate', key, json_string: jsonString }\n    this.commandHandler.onCommand(command).then(\n      () => {},\n      () => {}\n    )\n  }\n\n  handleEvent (event: any): void {\n    const { eventType } = event.data\n    console.log('[ReactEngine] received eventType: ', eventType)\n    switch (eventType) {\n      case 'initialiseDone':\n        console.log('[ReactEngine] received: initialiseDone')\n        this.resolveInitialized()\n        break\n\n      case 'runCycleDone':\n        console.log('[ReactEngine] received: event', event.data.scriptEvent)\n        this.handleRunCycle(event.data.scriptEvent)\n        break\n      default:\n        console.log(\n          '[ReactEngine] received unsupported flow event: ',\n          eventType\n        )\n    }\n  }\n\n  start (): void {\n    console.log('[WorkerProcessingEngine] started')\n\n    const waitForInitialization: Promise<void> = this.waitForInitialization()\n    const waitForSplashScreen: Promise<void> = this.waitForSplashScreen()\n\n    Promise.all([waitForInitialization, waitForSplashScreen]).then(\n      () => { this.firstRunCycle() },\n      () => {}\n    )\n  }\n\n  async waitForInitialization (): Promise<void> {\n    return await new Promise<void>((resolve) => {\n      this.resolveInitialized = resolve\n      this.worker.postMessage({ eventType: 'initialise' })\n    })\n  }\n\n  async waitForSplashScreen (): Promise<void> {\n    return await new Promise<void>((resolve) => {\n      this.resolveContinue = resolve\n      this.renderSplashScreen()\n    })\n  }\n\n  renderSplashScreen (): void {\n    const command: CommandUIRender = { __type__: 'CommandUIRender', page: { __type__: 'PropsUIPageSplashScreen' } }\n    if (isCommand(command)) {\n      this.commandHandler.onCommand(command).then(\n        (_response) => this.resolveContinue(),\n        () => {}\n      )\n    }\n  }\n\n  firstRunCycle (): void {\n    this.worker.postMessage({ eventType: 'firstRunCycle', sessionId: this.sessionId })\n  }\n\n  nextRunCycle (response: Response): void {\n    this.worker.postMessage({ eventType: 'nextRunCycle', response })\n  }\n\n  terminate (): void {\n    this.worker.terminate()\n  }\n\n  handleRunCycle (command: any): void {\n    if (isCommand(command)) {\n      this.commandHandler.onCommand(command).then(\n        (response) => this.nextRunCycle(response),\n        () => {}\n      )\n    }\n  }\n}\n"],"mappings":"AACA,SAA+CA,SAA/C,QAA0E,mBAA1E;AAEA,eAAe,MAAMC,sBAAN,CAAyD;EAQtEC,WAAW,CAAEC,SAAF,EAAqBC,MAArB,EAAqCC,cAArC,EAAqE;IAAA,KAPhFF,SAOgF;IAAA,KANhFC,MAMgF;IAAA,KALhFC,cAKgF;IAAA,KAHhFC,kBAGgF;IAAA,KAFhFC,eAEgF;IAC9E,KAAKJ,SAAL,GAAiBA,SAAjB;IACA,KAAKE,cAAL,GAAsBA,cAAtB;IACA,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKA,MAAL,CAAYI,OAAZ,GAAsBC,OAAO,CAACC,GAA9B;;IACA,KAAKN,MAAL,CAAYO,SAAZ,GAAyBC,KAAD,IAAW;MACjCH,OAAO,CAACC,GAAR,CACE,uDADF,EAEEE,KAAK,CAACC,IAAN,CAAWC,SAFb;MAIA,KAAKC,WAAL,CAAiBH,KAAjB;IACD,CAND;;IAQA,KAAKI,cAAL,CAAoBb,SAApB;EACD;;EAEDa,cAAc,CAAEb,SAAF,EAA2B;IACvC,MAAMc,GAAG,GAAI,GAAEd,SAAU,WAAzB;IACA,MAAMe,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAEC,OAAO,EAAE;IAAX,CAAf,CAAnB;IACA,MAAMC,OAA4B,GAAG;MAAEC,QAAQ,EAAE,qBAAZ;MAAmCN,GAAnC;MAAwCO,WAAW,EAAEN;IAArD,CAArC;IACA,KAAKb,cAAL,CAAoBoB,SAApB,CAA8BH,OAA9B,EAAuCI,IAAvC,CACE,MAAM,CAAE,CADV,EAEE,MAAM,CAAE,CAFV;EAID;;EAEDX,WAAW,CAAEH,KAAF,EAAoB;IAC7B,MAAM;MAAEE;IAAF,IAAgBF,KAAK,CAACC,IAA5B;IACAJ,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDI,SAAlD;;IACA,QAAQA,SAAR;MACE,KAAK,gBAAL;QACEL,OAAO,CAACC,GAAR,CAAY,wCAAZ;QACA,KAAKJ,kBAAL;QACA;;MAEF,KAAK,cAAL;QACEG,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CE,KAAK,CAACC,IAAN,CAAWc,WAAxD;QACA,KAAKC,cAAL,CAAoBhB,KAAK,CAACC,IAAN,CAAWc,WAA/B;QACA;;MACF;QACElB,OAAO,CAACC,GAAR,CACE,iDADF,EAEEI,SAFF;IAXJ;EAgBD;;EAEDe,KAAK,GAAU;IACbpB,OAAO,CAACC,GAAR,CAAY,kCAAZ;IAEA,MAAMoB,qBAAoC,GAAG,KAAKA,qBAAL,EAA7C;IACA,MAAMC,mBAAkC,GAAG,KAAKA,mBAAL,EAA3C;IAEAC,OAAO,CAACC,GAAR,CAAY,CAACH,qBAAD,EAAwBC,mBAAxB,CAAZ,EAA0DL,IAA1D,CACE,MAAM;MAAE,KAAKQ,aAAL;IAAsB,CADhC,EAEE,MAAM,CAAE,CAFV;EAID;;EAE0B,MAArBJ,qBAAqB,GAAmB;IAC5C,OAAO,MAAM,IAAIE,OAAJ,CAAmBG,OAAD,IAAa;MAC1C,KAAK7B,kBAAL,GAA0B6B,OAA1B;MACA,KAAK/B,MAAL,CAAYgC,WAAZ,CAAwB;QAAEtB,SAAS,EAAE;MAAb,CAAxB;IACD,CAHY,CAAb;EAID;;EAEwB,MAAnBiB,mBAAmB,GAAmB;IAC1C,OAAO,MAAM,IAAIC,OAAJ,CAAmBG,OAAD,IAAa;MAC1C,KAAK5B,eAAL,GAAuB4B,OAAvB;MACA,KAAKE,kBAAL;IACD,CAHY,CAAb;EAID;;EAEDA,kBAAkB,GAAU;IAC1B,MAAMf,OAAwB,GAAG;MAAEC,QAAQ,EAAE,iBAAZ;MAA+Be,IAAI,EAAE;QAAEf,QAAQ,EAAE;MAAZ;IAArC,CAAjC;;IACA,IAAIvB,SAAS,CAACsB,OAAD,CAAb,EAAwB;MACtB,KAAKjB,cAAL,CAAoBoB,SAApB,CAA8BH,OAA9B,EAAuCI,IAAvC,CACGa,SAAD,IAAe,KAAKhC,eAAL,EADjB,EAEE,MAAM,CAAE,CAFV;IAID;EACF;;EAED2B,aAAa,GAAU;IACrB,KAAK9B,MAAL,CAAYgC,WAAZ,CAAwB;MAAEtB,SAAS,EAAE,eAAb;MAA8BX,SAAS,EAAE,KAAKA;IAA9C,CAAxB;EACD;;EAEDqC,YAAY,CAAEC,QAAF,EAA4B;IACtC,KAAKrC,MAAL,CAAYgC,WAAZ,CAAwB;MAAEtB,SAAS,EAAE,cAAb;MAA6B2B;IAA7B,CAAxB;EACD;;EAEDC,SAAS,GAAU;IACjB,KAAKtC,MAAL,CAAYsC,SAAZ;EACD;;EAEDd,cAAc,CAAEN,OAAF,EAAsB;IAClC,IAAItB,SAAS,CAACsB,OAAD,CAAb,EAAwB;MACtB,KAAKjB,cAAL,CAAoBoB,SAApB,CAA8BH,OAA9B,EAAuCI,IAAvC,CACGe,QAAD,IAAc,KAAKD,YAAL,CAAkBC,QAAlB,CADhB,EAEE,MAAM,CAAE,CAFV;IAID;EACF;;AA9GqE"},"metadata":{},"sourceType":"module"}